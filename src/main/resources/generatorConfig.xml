<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>

    <context id="DB2Tables" targetRuntime="MyBatis3">
        <!-- 是否去除自动生成的代码中的注释 true：是 false：否-->
        <commentGenerator>
            <property name="suppressDate" value="true"/>
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>

        <!-- 数据库连接信息：驱动类、连接地址、用户名、密码 -->
        <jdbcConnection driverClass="com.mysql.jdbc.Driver" connectionURL="jdbc:mysql://47.104.189.193:3306/grade?characterEncoding=utf-8"
                        userId="root" password="ab123456">
        </jdbcConnection>

        <!-- 默认 false，把 JDBC DECIMAL 和 NUMERIC 类型解析为 Integer
             为 true 时解析为 java.math.BigDecimal -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- targetProject：生成 POJO 类的位置 -->
        <javaModelGenerator targetPackage="com.grade.entity" targetProject="src/main/java">
            <!-- enableSubPackages：是否让 schema 作为包的后缀-->
            <property name="enableSubPackages" value="false"/>
            <!-- trimStrings：从数据库返回的值被清理前后的空格 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!-- targetProject：生成xml映射文件存放位置 -->
        <sqlMapGenerator targetPackage="mappers" targetProject="./src/main/resources">
            <!-- enableSubPackages：是否让 schema 作为包的后缀-->
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>

        <!-- targetProject：生成mapper类存放位置 -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.grade.mapper" targetProject="./src/main/java">
            <!-- enableSubPackages：是否让 schema 作为包的后缀-->
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>

        <!--生成对应表及类名
            tableName:要生成的表名
            domainObjectName:生成后的实例名
            enableCountByExample:Count语句中加入where条件查询，默认为true开启
            enableUpdateByExample:Update语句中加入where条件查询，默认为true开启
            enableDeleteByExample:Delete语句中加入where条件查询，默认为true开启
            enableSelectByExample:Select多条语句中加入where条件查询，默认为true开启
            selectByExampleQueryId:Select单个对象语句中加入where条件查询，默认为true开启
        -->
        <!--<table tableName="g_order" domainObjectName="Order" enableCountByExample="false"-->
               <!--enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="true"-->
               <!--selectByExampleQueryId="false">-->
            <!--&lt;!&ndash; 使用数据库中实际的字段名作为生成的实体类的属性 &ndash;&gt;-->
            <!--<property name="useActualColumnNames" value="true"/>-->
            <!--&lt;!&ndash; 使用自增长键 &ndash;&gt;-->
            <!--<property name="my.isgen.usekeys" value="true"/>-->
            <!--<generatedKey column="id" sqlStatement="JDBC"/>-->
        <!--</table>-->

        <table tableName="app_order" domainObjectName="AppOrder" enableCountByExample="true"
               enableUpdateByExample="true" enableDeleteByExample="true" enableSelectByExample="true"
               selectByExampleQueryId="true">
            <!-- 使用数据库中实际的字段名作为生成的实体类的属性 -->
            <property name="useActualColumnNames" value="true"/>
            <!-- 使用自增长键 -->
            <!--<property name="my.isgen.usekeys" value="true"/>-->
            <generatedKey column="id" sqlStatement="JDBC"/>
            <columnOverride column="app_order" property="order"/>
            <!--<columnOverride column="app_order">-->
                <!--&lt;!&ndash; 使用property属性来指定列要生成的属性名称 &ndash;&gt;-->
                <!--<property name="property" value="order"/>-->

                <!--&lt;!&ndash; javaType用于指定生成的domain的属性类型，使用类型的全限定名-->
                <!--<property name="javaType" value=""/>-->
                 <!--&ndash;&gt;-->
                <!--&lt;!&ndash; jdbcType用于指定该列的JDBC类型-->
                <!--<property name="jdbcType" value=""/>-->
                 <!--&ndash;&gt;-->
                <!--&lt;!&ndash; typeHandler 用于指定该列使用到的TypeHandler，如果要指定，配置类型处理器的全限定名-->
                    <!--注意，mybatis中，不会生成到mybatis-config.xml中的typeHandler-->
                    <!--只会生成类似：where id = #{id,jdbcType=BIGINT,typeHandler=com._520it.mybatis.MyTypeHandler}的参数描述-->
                <!--<property name="jdbcType" value=""/>-->
                <!--&ndash;&gt;-->
                <!--&lt;!&ndash; 参考table元素的delimitAllColumns配置，默认为false-->
                <!--<property name="delimitedColumnName" value=""/>-->
                 <!--&ndash;&gt;-->
            <!--</columnOverride>-->
        </table>
    </context>
</generatorConfiguration>